<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Classroom Management Platform</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/supabase-js/2.38.4/umd/supabase.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .sidebar {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            height: fit-content;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .content-area {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
            margin: 5px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }
        
        .btn.secondary {
            background: linear-gradient(45deg, #f093fb, #f5576c);
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }
        
        .form-group input, .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .form-group input:focus, .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .assignment-card {
            background: linear-gradient(45deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            border: 2px solid rgba(102, 126, 234, 0.2);
            transition: all 0.3s ease;
        }
        
        .assignment-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
        }
        
        .spec-list {
            list-style: none;
            padding-left: 0;
        }
        
        .spec-list li {
            padding: 8px 0;
            border-bottom: 1px solid rgba(102, 126, 234, 0.2);
            position: relative;
            padding-left: 25px;
        }
        
        .spec-list li:before {
            content: "‚úì";
            position: absolute;
            left: 0;
            color: #667eea;
            font-weight: bold;
        }
        
        .level-badge {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            margin: 2px;
        }
        
        .level-not-yet { background: #fee; color: #c53030; }
        .level-approaching { background: #fef5e7; color: #dd6b20; }
        .level-meeting { background: #f0fff4; color: #38a169; }
        .level-exceeding { background: #ebf8ff; color: #3182ce; }
        
        .hidden { display: none; }
        
        .student-info {
            background: linear-gradient(45deg, rgba(240, 171, 252, 0.2), rgba(245, 87, 108, 0.2));
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
        }
        
        .nav-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }
        
        .submission-form {
            background: rgba(255, 255, 255, 0.7);
            padding: 25px;
            border-radius: 15px;
            margin-top: 20px;
        }
        
        .typing-analysis {
            font-size: 12px;
            color: #666;
            margin-top: 10px;
            padding: 10px;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 8px;
        }
        
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .nav-buttons {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìö Classroom Management Platform</h1>
            <p>Specifications-Based Learning with Academic Integrity</p>
        </div>

        <div id="auth-section">
            <div class="main-content">
                <div class="sidebar">
                    <h3>Get Started</h3>
                    <div class="form-group">
                        <label for="email">Email Address:</label>
                        <input type="email" id="email" placeholder="your.email@school.edu">
                    </div>
                    <div class="form-group">
                        <label for="fullName">Full Name:</label>
                        <input type="text" id="fullName" placeholder="Enter your full name">
                    </div>
                    <button class="btn" onclick="registerStudent()">Register/Login</button>
                </div>
                
                <div class="content-area">
                    <h3>Welcome to Your Classroom</h3>
                    <p>This platform uses <strong>specifications-based grading</strong> where you demonstrate mastery by meeting clear, specific criteria.</p>
                    
                    <h4>How It Works:</h4>
                    <ul>
                        <li><strong>Not Yet:</strong> Keep working - you haven't met the specifications yet</li>
                        <li><strong>Approaching:</strong> You're close! Minor revisions needed</li>
                        <li><strong>Meeting:</strong> Excellent! You've met all specifications</li>
                        <li><strong>Exceeding:</strong> Outstanding work that goes above and beyond</li>
                    </ul>
                    
                    <h4>Key Features:</h4>
                    <ul>
                        <li>üéØ Clear specifications for every assignment</li>
                        <li>üîÑ Unlimited revisions until you meet standards</li>
                        <li>ü§ù Quality peer review system</li>
                        <li>üìä Real-time progress tracking</li>
                        <li>üõ°Ô∏è Academic integrity monitoring</li>
                    </ul>
                </div>
            </div>
        </div>

        <div id="student-dashboard" class="hidden">
            <div class="student-info">
                <h2 id="welcome-message">Welcome back!</h2>
                <p id="student-stats">Loading your progress...</p>
            </div>
            
            <div class="nav-buttons">
                <button class="btn" onclick="showAssignments()">üìù View Assignments</button>
                <button class="btn" onclick="showSubmissions()">üì§ My Submissions</button>
                <button class="btn" onclick="showPeerReviews()">üë• Peer Reviews</button>
                <button class="btn" onclick="showProgress()">üìä Progress</button>
                <button class="btn secondary" onclick="logout()">üö™ Logout</button>
            </div>
            
            <div class="content-area">
                <div id="assignments-view">
                    <h3>Available Assignments</h3>
                    <div id="assignments-list">Loading assignments...</div>
                </div>
                
                <div id="submissions-view" class="hidden">
                    <h3>My Submissions</h3>
                    <div id="submissions-list">Loading submissions...</div>
                </div>
                
                <div id="peer-reviews-view" class="hidden">
                    <h3>Peer Review Tasks</h3>
                    <div id="peer-reviews-list">Loading peer reviews...</div>
                </div>
                
                <div id="progress-view" class="hidden">
                    <h3>My Progress</h3>
                    <div id="progress-details">Loading progress...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ‚≠ê REPLACE THESE WITH YOUR ACTUAL SUPABASE CREDENTIALS ‚≠ê
        const SUPABASE_URL = 'https://wjxmjszmhevqxtjjcdrk.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndqeG1qc3ptaGV2cXh0ampjZHJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQwMTU0MjksImV4cCI6MjA2OTU5MTQyOX0.8arEERqRssLSk_A6Fjxb9ijfJm1UcQYrrwNf_btDF40';
        
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        
        let currentStudent = null;
        let currentAssignments = [];
        let typingData = {
            keystrokes: [],
            startTime: null,
            pasteAttempts: 0,
            suspiciousActivity: []
        };

        // Authentication Functions
        async function registerStudent() {
            const email = document.getElementById('email').value;
            const fullName = document.getElementById('fullName').value;
            
            if (!email || !fullName) {
                alert('Please fill in all fields');
                return;
            }
            
            try {
                // Check if student exists
                const { data: existingStudent } = await supabase
                    .from('students')
                    .select('*')
                    .eq('email', email)
                    .single();
                
                if (existingStudent) {
                    currentStudent = existingStudent;
                } else {
                    // Create new student
                    const { data: newStudent, error } = await supabase
                        .from('students')
                        .insert([{ email, full_name: fullName }])
                        .select()
                        .single();
                    
                    if (error) throw error;
                    currentStudent = newStudent;
                }
                
                // Update last active
                await supabase
                    .from('students')
                    .update({ last_active: new Date().toISOString() })
                    .eq('id', currentStudent.id);
                
                showDashboard();
                
            } catch (error) {
                console.error('Registration error:', error);
                alert('Registration failed. Please try again.');
            }
        }

        function showDashboard() {
            document.getElementById('auth-section').classList.add('hidden');
            document.getElementById('student-dashboard').classList.remove('hidden');
            document.getElementById('welcome-message').textContent = `Welcome back, ${currentStudent.full_name}!`;
            
            loadAssignments();
            loadStudentStats();
        }

        function logout() {
            currentStudent = null;
            document.getElementById('auth-section').classList.remove('hidden');
            document.getElementById('student-dashboard').classList.add('hidden');
            document.getElementById('email').value = '';
            document.getElementById('fullName').value = '';
        }

        // Navigation Functions
        function showAssignments() {
            hideAllViews();
            document.getElementById('assignments-view').classList.remove('hidden');
            loadAssignments();
        }

        function showSubmissions() {
            hideAllViews();
            document.getElementById('submissions-view').classList.remove('hidden');
            loadSubmissions();
        }

        function showPeerReviews() {
            hideAllViews();
            document.getElementById('peer-reviews-view').classList.remove('hidden');
            loadPeerReviews();
        }

        function showProgress() {
            hideAllViews();
            document.getElementById('progress-view').classList.remove('hidden');
            loadProgress();
        }

        function hideAllViews() {
            document.getElementById('assignments-view').classList.add('hidden');
            document.getElementById('submissions-view').classList.add('hidden');
            document.getElementById('peer-reviews-view').classList.add('hidden');
            document.getElementById('progress-view').classList.add('hidden');
        }

        // Data Loading Functions
        async function loadAssignments() {
            try {
                const { data: assignments, error } = await supabase
                    .from('assignments')
                    .select('*')
                    .order('due_date', { ascending: true });
                
                if (error) throw error;
                
                currentAssignments = assignments;
                displayAssignments(assignments);
                
            } catch (error) {
                console.error('Error loading assignments:', error);
                document.getElementById('assignments-list').innerHTML = '<p>Error loading assignments. Please refresh the page.</p>';
            }
        }

        function displayAssignments(assignments) {
            const container = document.getElementById('assignments-list');
            
            if (!assignments || assignments.length === 0) {
                container.innerHTML = '<p>No assignments available yet.</p>';
                return;
            }
            
            container.innerHTML = assignments.map(assignment => {
                const specs = assignment.specifications?.specs || [];
                const levels = assignment.completion_levels || {};
                const dueDate = assignment.due_date ? new Date(assignment.due_date).toLocaleDateString() : 'No due date';
                
                return `
                    <div class="assignment-card">
                        <h4>${assignment.title}</h4>
                        <p><strong>Due:</strong> ${dueDate}</p>
                        <p>${assignment.description || 'No description available'}</p>
                        
                        <h5>Specifications:</h5>
                        <ul class="spec-list">
                            ${specs.map(spec => `<li>${spec}</li>`).join('')}
                        </ul>
                        
                        <h5>Achievement Levels:</h5>
                        <div>
                            ${Object.entries(levels).map(([level, description]) => 
                                `<div class="level-badge level-${level.toLowerCase().replace(' ', '-')}">${level}</div>`
                            ).join('')}
                        </div>
                        
                        <div style="margin-top: 15px;">
                            <button class="btn" onclick="startSubmission('${assignment.id}')">‚úèÔ∏è Submit Work</button>
                            <button class="btn secondary" onclick="viewSubmissionHistory('${assignment.id}')">üìã View History</button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        async function loadStudentStats() {
            try {
                const { data: submissions, error } = await supabase
                    .from('submissions')
                    .select('completion_level')
                    .eq('student_id', currentStudent.id);
                
                if (error) throw error;
                
                const stats = submissions.reduce((acc, sub) => {
                    acc[sub.completion_level] = (acc[sub.completion_level] || 0) + 1;
                    return acc;
                }, {});
                
                const statsText = Object.entries(stats)
                    .map(([level, count]) => `${level}: ${count}`)
                    .join(' | ') || 'No submissions yet';
                
                document.getElementById('student-stats').textContent = `Assignment Status: ${statsText}`;
                
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }

        async function loadSubmissions() {
            try {
                const { data: submissions, error } = await supabase
                    .from('submissions')
                    .select(`
                        *,
                        assignments(title)
                    `)
                    .eq('student_id', currentStudent.id)
                    .order('created_at', { ascending: false });
                
                if (error) throw error;
                
                displaySubmissions(submissions);
                
            } catch (error) {
                console.error('Error loading submissions:', error);
            }
        }

        function displaySubmissions(submissions) {
            const container = document.getElementById('submissions-list');
            
            if (!submissions || submissions.length === 0) {
                container.innerHTML = '<p>No submissions yet.</p>';
                return;
            }
            
            container.innerHTML = submissions.map(submission => `
                <div class="assignment-card">
                    <h4>${submission.assignments?.title || 'Unknown Assignment'}</h4>
                    <p><strong>Status:</strong> <span class="level-badge level-${submission.completion_level?.toLowerCase().replace(' ', '-')}">${submission.completion_level}</span></p>
                    <p><strong>Submitted:</strong> ${new Date(submission.created_at).toLocaleString()}</p>
                    <p><strong>Word Count:</strong> ${submission.word_count || 0}</p>
                    ${submission.instructor_feedback ? `<p><strong>Feedback:</strong> ${submission.instructor_feedback}</p>` : ''}
                    
                    ${submission.revision_allowed ? '<button class="btn secondary" onclick="reviseSubmission(\'' + submission.id + '\')">‚úèÔ∏è Revise</button>' : ''}
                </div>
            `).join('');
        }

        async function loadPeerReviews() {
            document.getElementById('peer-reviews-list').innerHTML = '<p>Peer review system will be loaded here.</p>';
        }

        async function loadProgress() {
            document.getElementById('progress-details').innerHTML = '<p>Detailed progress analytics will be shown here.</p>';
        }

        // Submission Functions
        function startSubmission(assignmentId) {
            const assignment = currentAssignments.find(a => a.id === assignmentId);
            if (!assignment) return;
            
            const container = document.getElementById('assignments-list');
            container.innerHTML = `
                <div class="assignment-card">
                    <h4>Submit: ${assignment.title}</h4>
                    <div class="submission-form">
                        <div class="form-group">
                            <label for="submission-content">Your Work:</label>
                            <textarea 
                                id="submission-content" 
                                rows="15" 
                                placeholder="Start typing your submission here..."
                                onkeydown="trackKeystroke(event)"
                                onpaste="handlePaste(event)"
                            ></textarea>
                        </div>
                        <div class="typing-analysis" id="typing-analysis">
                            Academic integrity monitoring active...
                        </div>
                        <button class="btn" onclick="submitWork('${assignmentId}')">üì§ Submit</button>
                        <button class="btn secondary" onclick="loadAssignments()">‚ùå Cancel</button>
                    </div>
                </div>
            `;
            
            // Initialize typing tracking
            typingData = {
                keystrokes: [],
                startTime: Date.now(),
                pasteAttempts: 0,
                suspiciousActivity: []
            };
        }

        function trackKeystroke(event) {
            const now = Date.now();
            if (!typingData.startTime) typingData.startTime = now;
            
            typingData.keystrokes.push({
                key: event.key,
                timestamp: now,
                interval: typingData.keystrokes.length > 0 ? 
                    now - typingData.keystrokes[typingData.keystrokes.length - 1].timestamp : 0
            });
            
            // Analyze typing patterns
            analyzeTypingPattern();
        }

        function handlePaste(event) {
            typingData.pasteAttempts++;
            typingData.suspiciousActivity.push({
                type: 'paste',
                timestamp: Date.now(),
                length: event.clipboardData.getData('text').length
            });
            
            document.getElementById('typing-analysis').innerHTML = `
                ‚ö†Ô∏è Paste detected (${typingData.pasteAttempts} total). Large paste operations may be flagged for review.
            `;
        }

        function analyzeTypingPattern() {
            const recent = typingData.keystrokes.slice(-50);
            const avgInterval = recent.reduce((sum, k) => sum + k.interval, 0) / recent.length;
            
            let status = "Normal typing pattern detected";
            
            if (avgInterval < 50 && recent.length > 10) {
                status = "‚ö†Ô∏è Very fast typing detected";
                typingData.suspiciousActivity.push({
                    type: 'fast_typing',
                    timestamp: Date.now(),
                    avg_interval: avgInterval
                });
            }
            
            document.getElementById('typing-analysis').innerHTML = `
                Keystrokes: ${typingData.keystrokes.length} | Avg Speed: ${Math.round(avgInterval)}ms | ${status}
            `;
        }

        async function submitWork(assignmentId) {
            const content = document.getElementById('submission-content').value;
            
            if (!content.trim()) {
                alert('Please enter your submission content');
                return;
            }
            
            try {
                const { data, error } = await supabase
                    .from('submissions')
                    .insert([{
                        student_id: currentStudent.id,
                        assignment_id: assignmentId,
                        content: content,
                        word_count: content.split(/\s+/).length,
                        typing_pattern_data: typingData,
                        completion_level: 'Not Yet', // Default, will be graded
                        status: 'submitted'
                    }])
                    .select()
                    .single();
                
                if (error) throw error;
                
                alert('Submission successful! Your work has been submitted for evaluation.');
                loadAssignments();
                
            } catch (error) {
                console.error('Submission error:', error);
                alert('Submission failed. Please try again.');
            }
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Classroom platform loaded');
        });
    </script>
</body>
</html>